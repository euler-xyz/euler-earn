diff --git a/src/EulerEarn.sol b/src/EulerEarn.sol
index 7b3634c..75e5008 100644
--- a/src/EulerEarn.sol
+++ b/src/EulerEarn.sol
@@ -106,6 +106,17 @@ contract EulerEarn is ReentrancyGuard, ERC4626, Ownable2Step, EVCUtil, IEulerEar
     /// @dev "Overrides" the ERC20's storage variable to be able to modify it.
     string private _symbol;
 
+    // HARNESS
+    // The index of the identifier of the last market withdrawn.
+    uint256 public lastIndexWithdraw;
+    // HARNESS
+    // The rank of a market identifier in the withdraw queue.
+    // Returns 0 if the corresponding market is not in the withdraw queue.
+    mapping(address => uint256) public withdrawRank;
+    // HARNESS
+    // The last index at which a market identifier has been removed from the withdraw queue.
+    mapping(address => uint256) public deletedAt;
+
     /* CONSTRUCTOR */
 
     /// @dev Initializes the contract.
@@ -353,6 +364,9 @@ contract EulerEarn is ReentrancyGuard, ERC4626, Ownable2Step, EVCUtil, IEulerEar
             seen[prevIndex] = true;
 
             newWithdrawQueue[i] = id;
+
+            // HARNESS
+            withdrawRank[address(id)] = i + 1;
         }
 
         for (uint256 i; i < currLength; ++i) {
@@ -370,6 +384,10 @@ contract EulerEarn is ReentrancyGuard, ERC4626, Ownable2Step, EVCUtil, IEulerEar
                     }
                 }
 
+                // HARNESS
+                deletedAt[address(id)] = i;
+                delete withdrawRank[address(id)];
+
                 delete config[id];
             }
         }
@@ -767,6 +785,9 @@ contract EulerEarn is ReentrancyGuard, ERC4626, Ownable2Step, EVCUtil, IEulerEar
             IERC20(asset()).forceApproveMaxWithPermit2(address(id), permit2);
 
             if (!marketConfig.enabled) {
+                // HARNESS
+                withdrawRank[address(id)] = withdrawQueue.length + 1;
+
                 withdrawQueue.push(id);
 
                 if (withdrawQueue.length > ConstantsLib.MAX_QUEUE_LENGTH) revert ErrorsLib.MaxQueueLengthExceeded();
@@ -824,6 +845,8 @@ contract EulerEarn is ReentrancyGuard, ERC4626, Ownable2Step, EVCUtil, IEulerEar
     /// @dev Withdraws `assets` from the strategy vaults.
     function _withdrawStrategy(uint256 assets) internal {
         for (uint256 i; i < withdrawQueue.length; ++i) {
+            // HARNESS
+            lastIndexWithdraw = i;
             IERC4626 id = withdrawQueue[i];
 
             uint256 toWithdraw =
